{"version":3,"sources":["reducer.js","components/Header.js","components/IdeaForm.js","components/IdeaList.js","App.js","serviceWorker.js","index.js"],"names":["reducer","state","action","type","payload","Object","objectSpread","ideas","concat","toConsumableArray","id","name","value","splice","Header","_ref","dispatch","react_default","a","createElement","className","href","onClick","title","description","IdeaForm","idea","handleChangeIdea","e","target","style","maxWidth","margin","placeholder","onChange","marginBottom","cols","rows","IdeaList","map","index","key","initialState","App","_useReducer","useReducer","_useReducer2","slicedToArray","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2760143f.chunk.js","sourcesContent":["export default function reducer(state, action) {\n  switch (action.type) {\n    case \"ADD_IDEA\":\n      if (!action.payload) return state;\n      return { ...state, ideas: [action.payload, ...state.ideas] };\n\n    case \"UPDATE_IDEA\":\n      if (!action.payload) return state;\n\n      var existingIdea = state.ideas[action.payload.id];\n      existingIdea[action.payload.name] = action.payload.value;\n\n      return { ...state, ideas: [...state.ideas] };\n\n    case \"DELETE_IDEA\":\n      state.ideas.splice(action.payload.id, 1);\n\n      return { ...state, ideas: [...state.ideas] };\n\n    default:\n      return state;\n  }\n}\n","import React from \"react\";\n\nexport default function Header({ state, dispatch }) {\n  const handleAddIdea = () => {\n    dispatch({ type: \"ADD_IDEA\", payload: { title: \"\", description: \"\" } });\n  };\n  return (\n    <div className=\"navbar navbar-fixed-top\">\n      <div className=\"navbar-header pull-left\">\n        <a className=\"navbar-brand\" href=\"/\">\n          Idea Board\n        </a>\n      </div>\n      <div className=\"navbar-header pull-right\">\n        <button className=\"btn btn-primary navbar-btn\" onClick={handleAddIdea}>\n          Add Idea\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function IdeaForm({ idea, dispatch, id }) {\n  const handleChangeIdea = e => {\n    dispatch({\n      type: \"UPDATE_IDEA\",\n      payload: { id: id, name: e.target.name, value: e.target.value }\n    });\n  };\n\n  const handleDeleteIdea = e => {\n    dispatch({\n      type: \"DELETE_IDEA\",\n      payload: { id: id }\n    });\n  };\n\n  return (\n    <div\n      className=\"card bg-info mb-3\"\n      style={{ maxWidth: \"20rem\", margin: \"10px\" }}\n    >\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">Idea</h5>\n\n        <input\n          name=\"title\"\n          placeholder=\"Title\"\n          value={idea.title}\n          onChange={e => handleChangeIdea(e)}\n          style={{ marginBottom: \"10px\" }}\n        />\n        <textarea\n          cols=\"30\"\n          rows=\"5\"\n          name=\"description\"\n          placeholder=\"Description\"\n          value={idea.description}\n          onChange={e => handleChangeIdea(e)}\n        />\n        <button className=\"btn btn-danger\" onClick={e => handleDeleteIdea(e)}>\n          {\" \"}\n          Delete\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport IdeaForm from \"./IdeaForm\";\nexport default function IdeaList({ state, dispatch }) {\n  return (\n    <div className=\"row\">\n      {state.ideas.map((idea, index) => (\n        <IdeaForm idea={idea} dispatch={dispatch} key={index} id={index} />\n      ))}\n    </div>\n  );\n}\n","import React, { useReducer } from \"react\";\nimport reducer from \"./reducer\";\nimport Header from \"./components/Header\";\nimport IdeaList from \"./components/IdeaList\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst initialState = {\n  ideas: []\n};\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container-fluid\">\n        <Header state={state} dispatch={dispatch} />\n        <IdeaList state={state} dispatch={dispatch} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}